{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../customers.service.\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction UpdateRouteComponent_small_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 27);\n    i0.ɵɵtext(1, \" (*) First name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateRouteComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 27);\n    i0.ɵɵtext(1, \" (*) Last name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateRouteComponent_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 27);\n    i0.ɵɵtext(1, \"(*) Email address is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateRouteComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 27);\n    i0.ɵɵtext(1, \"(*) Email address is invalid\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateRouteComponent_option_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 28);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const gender_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", gender_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", gender_r7, \" \");\n  }\n}\nfunction UpdateRouteComponent_option_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 28);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const accountType_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", accountType_r8);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", accountType_r8, \" \");\n  }\n}\nfunction UpdateRouteComponent_small_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 27);\n    i0.ɵɵtext(1, \"(*) Email address is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class UpdateRouteComponent {\n  constructor(formBuilder, customerService, activeRoute, router) {\n    this.formBuilder = formBuilder;\n    this.customerService = customerService;\n    this.activeRoute = activeRoute;\n    this.router = router;\n    this.isLoading = false;\n    this.genders = [\"Male\", \"Female\"];\n    this.accountTypes = [\"Saving\", \"Checking\"];\n    this.customerForm = this.formBuilder.group({\n      firstName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)]],\n      lastName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)]],\n      email: [\"\", [Validators.required, Validators.email]],\n      address: [\"\", [Validators.required, Validators.min(1), Validators.max(100)]],\n      gender: [null, Validators.required],\n      accountType: [null, Validators.required]\n    }, {\n      updateOn: 'blur'\n    });\n  }\n  ngOnInit() {\n    this.activeRoute.params.pipe(switchMap(params => this.customerService.getCustomerById(params['id']))).subscribe({\n      next: customer => {\n        this.updatedCustomer = customer;\n      },\n      error: () => {\n        this.router.navigate(['/not-found']);\n      }\n    });\n  }\n  submit() {\n    this.isLoading = true;\n    this.customerService.updateCustomer(this.updatedCustomer).subscribe(customer => {\n      this.isLoading = false;\n      this.customerForm.reset();\n      this.router.navigate(['/details', customer.id]);\n    });\n  }\n  getControl(controlName) {\n    return this.customerForm.get(controlName);\n  }\n  canSubmit() {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n}\nUpdateRouteComponent.ɵfac = function UpdateRouteComponent_Factory(t) {\n  return new (t || UpdateRouteComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CustomersService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n};\nUpdateRouteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateRouteComponent,\n  selectors: [[\"app-update-route\"]],\n  decls: 44,\n  vars: 17,\n  consts: [[1, \"flex\", \"flex-col\", \"items-center\", \"w-full\", \"mx-auto\", \"mt-20\"], [1, \"py-8\", \"text-2xl\", \"text-center\"], [1, \"px-8\", \"pt-6\", \"pb-8\", \"mb-4\", \"bg-white\", \"rounded\", \"md:w-fit\", \"w-full\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-4\", \"md:flex\", \"md:justify-between\"], [1, \"mb-4\", \"md:mr-2\", \"md:mb-0\"], [\"for\", \"firstName\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"id\", \"firstName\", \"type\", \"text\", \"placeholder\", \"First Name\", \"formControlName\", \"firstName\", 1, \"w-full\", \"px-3\", \"py-2\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"appearance-none\", \"focus:outline-none\", \"focus:shadow-outline\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"text-red-500\", 4, \"ngIf\"], [1, \"md:ml-2\"], [\"for\", \"lastName\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"id\", \"lastName\", \"type\", \"text\", \"placeholder\", \"Last Name\", \"formControlName\", \"lastName\", 1, \"w-full\", \"px-3\", \"py-2\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"appearance-none\", \"focus:outline-none\", \"focus:shadow-outline\", 3, \"ngModel\", \"ngModelChange\"], [1, \"mb-4\", \"md:w-full\", \"mr-2\"], [\"for\", \"email\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"id\", \"email\", \"type\", \"email\", \"placeholder\", \"Email\", \"formControlName\", \"email\", 1, \"w-full\", \"px-3\", \"py-2\", \"mb-3\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"appearance-none\", \"focus:outline-none\", \"focus:shadow-outline\", 3, \"ngModel\", \"ngModelChange\"], [1, \"mb-4\", \"md:flex\", \"md:justify-between\", \"md:gap-4\"], [1, \"md:w-1/2\"], [\"for\", \"gender\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"formControlName\", \"gender\", \"name\", \"gender\", \"id\", \"gender\", 1, \"w-full\", \"px-3\", \"py-2\", \"mb-3\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"focus:outline-none\", \"focus:shadow-outline\", 3, \"ngModel\", \"ngModelChange\"], [\"disabled\", \"\", 3, \"ngValue\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"accountType\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"formControlName\", \"accountType\", \"name\", \"accountType\", \"id\", \"accountType\", 1, \"w-full\", \"px-3\", \"py-2\", \"mb-3\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"focus:outline-none\", \"focus:shadow-outline\", 3, \"ngModel\", \"ngModelChange\"], [1, \"mb-4\"], [\"for\", \"address\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"id\", \"address\", \"type\", \"text\", \"placeholder\", \"Address\", \"formControlName\", \"address\", 1, \"w-full\", \"px-3\", \"py-2\", \"mb-3\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"appearance-none\", \"focus:outline-none\", \"focus:shadow-outline\", 3, \"ngModel\", \"ngModelChange\"], [1, \"mb-6\", \"text-center\"], [\"type\", \"submit\", 1, \"disabled:cursor-not-allowed\", \"cursor-pointer\", \"w-1/2\", \"px-4\", \"py-2\", \"font-bold\", \"text-white\", \"bg-indigo-500\", \"rounded-full\", \"hover:bg-indigo-700\", \"focus:outline-none\", \"focus:shadow-outline\", 3, \"disabled\"], [1, \"text-red-500\"], [3, \"ngValue\"]],\n  template: function UpdateRouteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n      i0.ɵɵtext(2, \"Update the Customer!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateRouteComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \" First Name \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateRouteComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.updatedCustomer.firstName = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, UpdateRouteComponent_small_9_Template, 2, 0, \"small\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"label\", 9);\n      i0.ɵɵtext(12, \" Last Name \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateRouteComponent_Template_input_ngModelChange_13_listener($event) {\n        return ctx.updatedCustomer.lastName = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, UpdateRouteComponent_small_14_Template, 2, 0, \"small\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 11)(16, \"label\", 12);\n      i0.ɵɵtext(17, \" Email \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"input\", 13);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateRouteComponent_Template_input_ngModelChange_18_listener($event) {\n        return ctx.updatedCustomer.email = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(19, UpdateRouteComponent_small_19_Template, 2, 0, \"small\", 7);\n      i0.ɵɵtemplate(20, UpdateRouteComponent_small_20_Template, 2, 0, \"small\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\", 14)(22, \"div\", 15)(23, \"label\", 16);\n      i0.ɵɵtext(24, \"Gender\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"select\", 17);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateRouteComponent_Template_select_ngModelChange_25_listener($event) {\n        return ctx.updatedCustomer.gender = $event;\n      });\n      i0.ɵɵelementStart(26, \"option\", 18);\n      i0.ɵɵtext(27, \" -- Gender -- \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(28, UpdateRouteComponent_option_28_Template, 2, 2, \"option\", 19);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(29, \"div\", 15)(30, \"label\", 20);\n      i0.ɵɵtext(31, \"Account Type\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"select\", 21);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateRouteComponent_Template_select_ngModelChange_32_listener($event) {\n        return ctx.updatedCustomer.accountType = $event;\n      });\n      i0.ɵɵelementStart(33, \"option\", 18);\n      i0.ɵɵtext(34, \" -- Account -- \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(35, UpdateRouteComponent_option_35_Template, 2, 2, \"option\", 19);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(36, \"div\", 22)(37, \"label\", 23);\n      i0.ɵɵtext(38, \" Address \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(39, \"input\", 24);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateRouteComponent_Template_input_ngModelChange_39_listener($event) {\n        return ctx.updatedCustomer.address = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(40, UpdateRouteComponent_small_40_Template, 2, 0, \"small\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"div\", 25)(42, \"button\", 26);\n      i0.ɵɵtext(43, \" Update \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      let tmp_2_0;\n      let tmp_4_0;\n      let tmp_6_0;\n      let tmp_7_0;\n      let tmp_15_0;\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.customerForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.updatedCustomer.firstName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.getControl(\"firstName\")) == null ? null : tmp_2_0.hasError(\"required\")) && ((tmp_2_0 = ctx.getControl(\"firstName\")) == null ? null : tmp_2_0.touched));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.updatedCustomer.lastName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.getControl(\"lastName\")) == null ? null : tmp_4_0.hasError(\"required\")) && ((tmp_4_0 = ctx.getControl(\"lastName\")) == null ? null : tmp_4_0.touched));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.updatedCustomer.email);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_6_0 = ctx.getControl(\"email\")) == null ? null : tmp_6_0.hasError(\"required\")) && ((tmp_6_0 = ctx.getControl(\"email\")) == null ? null : tmp_6_0.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_7_0 = ctx.getControl(\"email\")) == null ? null : tmp_7_0.hasError(\"email\")) && ((tmp_7_0 = ctx.getControl(\"email\")) == null ? null : tmp_7_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.updatedCustomer.gender);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngValue\", null);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.genders);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.updatedCustomer.accountType);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngValue\", null);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.accountTypes);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.updatedCustomer.address);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_15_0 = ctx.getControl(\"address\")) == null ? null : tmp_15_0.hasError(\"required\")) && ((tmp_15_0 = ctx.getControl(\"address\")) == null ? null : tmp_15_0.touched));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.isLoading || !ctx.canSubmit());\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","switchMap","i0","UpdateRouteComponent","constructor","formBuilder","customerService","activeRoute","router","customerForm","group","firstName","required","minLength","maxLength","lastName","email","address","min","max","gender","accountType","updateOn","ngOnInit","params","pipe","getCustomerById","subscribe","next","customer","updatedCustomer","error","navigate","submit","isLoading","updateCustomer","reset","id","getControl","controlName","get","canSubmit","dirty","valid","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\angular-project\\src\\app\\update-route\\update-route.component.ts","D:\\angular-project\\src\\app\\update-route\\update-route.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { switchMap } from 'rxjs';\nimport { CustomersService } from '../customers.service.';\nimport { Customer } from '../models/customer.model';\n\n@Component({\n  selector: 'app-update-route',\n  templateUrl: './update-route.component.html',\n  styleUrls: ['./update-route.component.css']\n})\nexport class UpdateRouteComponent implements OnInit{\n  customerForm: FormGroup;\n  isLoading = false;\n  genders = [\"Male\",\"Female\"];\n  accountTypes = [\"Saving\",\"Checking\"];\n  updatedCustomer !: Customer;\n  constructor(\n    private formBuilder: FormBuilder,\n    private customerService: CustomersService,\n    private activeRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    this.customerForm = this.formBuilder.group({\n      firstName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n      ],\n      lastName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n      ],\n      email: [\n        \"\",[Validators.required, Validators.email],\n      ],\n      address: [\n        \"\",\n        [Validators.required, Validators.min(1), Validators.max(100)],\n      ],\n      gender: [\n        null,\n      Validators.required],\n      accountType: [\n        null,\n      Validators.required],\n    },{ updateOn: 'blur' });\n  }\n  ngOnInit(): void {\n    this.activeRoute.params\n    .pipe(switchMap((params) => this.customerService.getCustomerById(params['id'])))\n    .subscribe({\n      next: (customer) => {this.updatedCustomer = customer},\n      error: () => {\n        this.router.navigate(['/not-found']);\n      },\n    });\n}\n  submit() {\n\n    this.isLoading = true;\n    this.customerService\n      .updateCustomer(this.updatedCustomer)\n      .subscribe((customer: Customer) => {\n        this.isLoading = false;\n        this.customerForm.reset();\n        this.router.navigate(['/details', customer.id]);\n      });\n\n  }\n\n  getControl(controlName: string) {\n    return this.customerForm.get(controlName);\n  }\n\n  canSubmit(): boolean {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n}\n","<div class=\"flex flex-col items-center w-full mx-auto mt-20\">\n  <h3 class=\"py-8 text-2xl text-center\">Update the Customer!</h3>\n  <form class=\"px-8 pt-6 pb-8 mb-4 bg-white rounded md:w-fit w-full\" [formGroup]=\"customerForm\" (ngSubmit)=\"submit()\" >\n    <div class=\"mb-4 md:flex md:justify-between\">\n      <div class=\"mb-4 md:mr-2 md:mb-0\">\n        <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"firstName\">\n          First Name\n        </label>\n        <input\n          class=\"w-full px-3 py-2 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n          id=\"firstName\"\n          type=\"text\"\n          placeholder=\"First Name\"\n          formControlName=\"firstName\"\n          [(ngModel)]=\"updatedCustomer.firstName\"\n        />\n        <small class=\"text-red-500\" *ngIf=\"getControl('firstName')?.hasError('required') && getControl('firstName')?.touched\">\n          (*) First name is required\n      </small>\n      </div>\n      <div class=\"md:ml-2\">\n        <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"lastName\">\n          Last Name\n        </label>\n        <input\n          class=\"w-full px-3 py-2 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n          id=\"lastName\"\n          type=\"text\"\n          placeholder=\"Last Name\"\n          formControlName=\"lastName\"\n          [(ngModel)]=\"updatedCustomer.lastName\"\n        />\n        <small class=\"text-red-500\" *ngIf=\"getControl('lastName')?.hasError('required') && getControl('lastName')?.touched\">\n          (*) Last name is required\n      </small>\n      </div>\n    </div>\n        <div class=\"mb-4 md:w-full mr-2\">\n        <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"email\">\n          Email\n        </label>\n        <input\n          class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          formControlName=\"email\"\n          [(ngModel)]=\"updatedCustomer.email\"\n        />\n        <small class=\"text-red-500\" *ngIf=\"getControl('email')?.hasError('required')&& getControl('email')?.touched\">(*) Email address is required</small>\n        <small class=\"text-red-500\" *ngIf=\"getControl('email')?.hasError('email') && getControl('email')?.touched\">(*) Email address is invalid</small>\n      </div>\n    <div class=\"mb-4 md:flex md:justify-between md:gap-4\">\n      <div class=\"md:w-1/2\">\n        <label for=\"gender\" class=\" block mb-2 text-sm font-bold text-gray-700\">Gender</label>\n        <select [(ngModel)]=\"updatedCustomer.gender\" formControlName=\"gender\" name=\"gender\" id=\"gender\" class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow  focus:outline-none focus:shadow-outline\">\n          <option [ngValue]=\"null\" disabled>  -- Gender --   </option>\n          <option *ngFor=\"let gender of genders\" [ngValue]=\"gender\">\n            {{gender}}\n          </option>\n        </select>\n      </div>\n\n      <div class=\"md:w-1/2\">\n        <label for=\"accountType\" class=\" block mb-2 text-sm font-bold text-gray-700\">Account Type</label>\n        <select [(ngModel)]=\"updatedCustomer.accountType\" formControlName=\"accountType\" name=\"accountType\" id=\"accountType\" class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow  focus:outline-none focus:shadow-outline\">\n          <option [ngValue]=\"null\" disabled>  -- Account --   </option>\n          <option *ngFor=\"let accountType of accountTypes\" [ngValue]=\"accountType\">\n            {{accountType}}\n          </option>\n        </select>\n      </div>\n    </div>\n    <div class=\"mb-4\">\n      <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"address\">\n        Address\n      </label>\n      <input\n        class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n        id=\"address\"\n        type=\"text\"\n        placeholder=\"Address\"\n        formControlName=\"address\"\n        [(ngModel)]=\"updatedCustomer.address\"\n      />\n      <small class=\"text-red-500\" *ngIf=\"getControl('address')?.hasError('required')&& getControl('address')?.touched\">(*) Email address is required</small>\n    </div>\n    <div class=\"mb-6 text-center\">\n      <button\n        class=\"disabled:cursor-not-allowed cursor-pointer w-1/2 px-4 py-2 font-bold text-white bg-indigo-500 rounded-full hover:bg-indigo-700 focus:outline-none focus:shadow-outline\"\n        type=\"submit\"\n        [disabled]=\"isLoading || !canSubmit()\"\n      >\n        Update\n      </button>\n    </div>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}