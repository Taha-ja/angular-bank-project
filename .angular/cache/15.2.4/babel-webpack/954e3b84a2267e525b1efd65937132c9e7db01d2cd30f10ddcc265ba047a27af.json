{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { map } from 'rxjs';\nlet CreateRouteComponent = class CreateRouteComponent {\n  constructor(formBuilder, customerService, router) {\n    this.formBuilder = formBuilder;\n    this.customerService = customerService;\n    this.router = router;\n    this.isLoading = false;\n    this.genders = [\"Male\", \"Female\"];\n    this.customerForm = this.formBuilder.group({\n      firstName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)], [this.validateName.bind(this)]],\n      lastName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)], [this.validateName.bind(this)]],\n      email: [\"\", [Validators.required, Validators.email]],\n      address: [\"\", [Validators.required, Validators.min(1), Validators.max(100)]],\n      gender: [\"-- Choose your Gender --\"]\n    });\n  }\n  // public list: string[] = [];\n  // public gen() {\n  //   console.log(typeof uuid());\n  //   this.list.push(uuid());\n  // }\n  submit() {\n    this.isLoading = true;\n    console.log(this.customerForm.value);\n    // this.customerService\n    //   .createCustomer(this.customerForm.value)\n    //   .subscribe((customer: Customer) => {\n    //     this.isLoading = false;\n    //     this.customerForm.reset();\n    //     // this.gen();\n    //     //this.router.navigate(['/details', customer.id]);\n    //   });\n  }\n\n  getControl(controlName) {\n    return this.customerForm.get(controlName);\n  }\n  canSubmit() {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n  validateName(control) {\n    return this.customerService.getCustomerByName(control.value).pipe(map(customers => {\n      if (customers.length > 0) {\n        return {\n          nameExists: true\n        };\n      }\n      return null;\n    }));\n  }\n};\nCreateRouteComponent = __decorate([Component({\n  selector: 'app-create-route',\n  templateUrl: './create-route.component.html',\n  styleUrls: ['./create-route.component.css']\n})], CreateRouteComponent);\nexport { CreateRouteComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAkDC,UAAU,QAAQ,gBAAgB;AAEpF,SAASC,GAAG,QAAoB,MAAM;AAU/B,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAI/BC,YACUC,WAAwB,EACxBC,eAAiC,EACjCC,MAAc;IAFd,gBAAW,GAAXF,WAAW;IACX,oBAAe,GAAfC,eAAe;IACf,WAAM,GAANC,MAAM;IALhB,cAAS,GAAG,KAAK;IACjB,YAAO,GAAG,CAAC,MAAM,EAAC,QAAQ,CAAC;IAMzB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC;MACzCC,SAAS,EAAE,CACT,EAAE,EACF,CACET,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CACzB,EACD,CAAC,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAC/B;MACDC,QAAQ,EAAE,CACR,EAAE,EACF,CACEf,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CACzB,EACD,CAAC,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAC/B;MACDE,KAAK,EAAE,CACL,EAAE,EAAC,CAAChB,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACgB,KAAK,CAAC,CAC3C;MACDC,OAAO,EAAE,CACP,EAAE,EACF,CAACjB,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACkB,GAAG,CAAC,CAAC,CAAC,EAAElB,UAAU,CAACmB,GAAG,CAAC,GAAG,CAAC,CAAC,CAC9D;MACDC,MAAM,EAAE,CACN,0BAA0B;KAC7B,CAAC;EACJ;EACA;EACA;EACA;EACA;EACA;EACAC,MAAM;IAEJ,IAAI,CAACC,SAAS,GAAG,IAAI;IACrBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACjB,YAAY,CAACkB,KAAK,CAAC;IACpC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAEF;;EAEAC,UAAU,CAACC,WAAmB;IAC5B,OAAO,IAAI,CAACpB,YAAY,CAACqB,GAAG,CAACD,WAAW,CAAC;EAC3C;EAEAE,SAAS;IACP,OAAO,IAAI,CAACtB,YAAY,CAACuB,KAAK,IAAI,IAAI,CAACvB,YAAY,CAACwB,KAAK;EAC3D;EAEAlB,YAAY,CAACmB,OAAwB;IACnC,OAAO,IAAI,CAAC3B,eAAe,CAAC4B,iBAAiB,CAACD,OAAO,CAACP,KAAK,CAAC,CAACS,IAAI,CAC/DjC,GAAG,CAAEkC,SAAqB,IAAI;MAC5B,IAAIA,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;QACxB,OAAO;UAAEC,UAAU,EAAE;QAAI,CAAE;;MAE7B,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;CACD;AA7EYnC,oBAAoB,eALhCH,SAAS,CAAC;EACTuC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACWtC,oBAAoB,CA6EhC;SA7EYA,oBAAoB","names":["Component","Validators","map","CreateRouteComponent","constructor","formBuilder","customerService","router","customerForm","group","firstName","required","minLength","maxLength","validateName","bind","lastName","email","address","min","max","gender","submit","isLoading","console","log","value","getControl","controlName","get","canSubmit","dirty","valid","control","getCustomerByName","pipe","customers","length","nameExists","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\angular-project\\src\\app\\create-route\\create-route.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { map, Observable } from 'rxjs';\nimport { CustomersService } from '../customers.service.';\nimport { Customer } from '../models/customer.model';\nimport { v4 as uuid } from 'uuid';\n\n@Component({\n  selector: 'app-create-route',\n  templateUrl: './create-route.component.html',\n  styleUrls: ['./create-route.component.css']\n})\nexport class CreateRouteComponent {\n  customerForm: FormGroup;\n  isLoading = false;\n  genders = [\"Male\",\"Female\"];\n  constructor(\n    private formBuilder: FormBuilder,\n    private customerService: CustomersService,\n    private router: Router\n  ) {\n    this.customerForm = this.formBuilder.group({\n      firstName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n        [this.validateName.bind(this)],\n      ],\n      lastName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n        [this.validateName.bind(this)],\n      ],\n      email: [\n        \"\",[Validators.required, Validators.email],\n      ],\n      address: [\n        \"\",\n        [Validators.required, Validators.min(1), Validators.max(100)],\n      ],\n      gender: [\n        \"-- Choose your Gender --\",],\n    });\n  }\n  // public list: string[] = [];\n  // public gen() {\n  //   console.log(typeof uuid());\n  //   this.list.push(uuid());\n  // }\n  submit() {\n\n    this.isLoading = true;\n    console.log(this.customerForm.value)\n    // this.customerService\n    //   .createCustomer(this.customerForm.value)\n    //   .subscribe((customer: Customer) => {\n    //     this.isLoading = false;\n    //     this.customerForm.reset();\n    //     // this.gen();\n    //     //this.router.navigate(['/details', customer.id]);\n    //   });\n\n  }\n\n  getControl(controlName: string) {\n    return this.customerForm.get(controlName);\n  }\n\n  canSubmit(): boolean {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n\n  validateName(control: AbstractControl): Observable<{ nameExists: boolean } | null> {\n    return this.customerService.getCustomerByName(control.value).pipe(\n      map((customers: Customer[]) => {\n        if (customers.length > 0) {\n          return { nameExists: true };\n        }\n        return null;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}