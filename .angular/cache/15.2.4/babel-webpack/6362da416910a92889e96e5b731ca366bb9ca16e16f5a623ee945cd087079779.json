{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { switchMap } from 'rxjs';\nlet UpdateRouteComponent = class UpdateRouteComponent {\n  constructor(formBuilder, customerService, activeRoute, router) {\n    this.formBuilder = formBuilder;\n    this.customerService = customerService;\n    this.activeRoute = activeRoute;\n    this.router = router;\n    this.isLoading = false;\n    this.genders = [\"Male\", \"Female\"];\n    this.accountTypes = [\"Saving\", \"Checking\"];\n    this.customerForm = this.formBuilder.group({\n      firstName: [''],\n      lastName: [''],\n      email: [\"\"],\n      address: [\"\"],\n      gender: [null],\n      accountType: [null]\n    }, {\n      updateOn: 'blur'\n    });\n  }\n  ngOnInit() {\n    this.activeRoute.params.pipe(switchMap(params => this.customerService.getCustomerById(params['id']))).subscribe({\n      next: customer => {\n        this.updatedCustomer = customer;\n      },\n      error: () => {\n        this.router.navigate(['/not-found']);\n      }\n    });\n  }\n  submit() {\n    this.isLoading = true;\n    console.log(this.customerForm.value);\n    this.customerService.updateCustomer(this.customerForm.value).subscribe(customer => {\n      this.isLoading = false;\n      console.log(customer);\n      this.customerForm.reset();\n      this.router.navigate(['/details', customer.id]);\n    });\n  }\n  getControl(controlName) {\n    return this.customerForm.get(controlName);\n  }\n  canSubmit() {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n};\nUpdateRouteComponent = __decorate([Component({\n  selector: 'app-update-route',\n  templateUrl: './update-route.component.html',\n  styleUrls: ['./update-route.component.css']\n})], UpdateRouteComponent);\nexport { UpdateRouteComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAASC,SAAS,QAAQ,MAAM;AASzB,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAM/BC,YACUC,WAAwB,EACxBC,eAAiC,EACjCC,WAA2B,EAC3BC,MAAc;IAHd,gBAAW,GAAXH,WAAW;IACX,oBAAe,GAAfC,eAAe;IACf,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IARhB,cAAS,GAAG,KAAK;IACjB,YAAO,GAAG,CAAC,MAAM,EAAC,QAAQ,CAAC;IAC3B,iBAAY,GAAG,CAAC,QAAQ,EAAC,UAAU,CAAC;IAQlC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACzCC,SAAS,EAAE,CACT,EAAE,CACH;MACDC,QAAQ,EAAE,CACR,EAAE,CACH;MACDC,KAAK,EAAE,CACL,EAAE,CACH;MACDC,OAAO,EAAE,CACP,EAAE,CACH;MACDC,MAAM,EAAE,CACN,IAAI,CACL;MACDC,WAAW,EAAE,CACX,IAAI;KAEP,EAAC;MAAEC,QAAQ,EAAE;IAAM,CAAE,CAAC;EACzB;EACAC,QAAQ;IACN,IAAI,CAACX,WAAW,CAACY,MAAM,CACtBC,IAAI,CAAClB,SAAS,CAAEiB,MAAM,IAAK,IAAI,CAACb,eAAe,CAACe,eAAe,CAACF,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAC/EG,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QAAE,IAAI,CAACC,eAAe,GAAGD,QAAQ;MAAA,CAAC;MACrDE,KAAK,EAAE,MAAK;QACV,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACtC;KACD,CAAC;EACN;EACEC,MAAM;IAEJ,IAAI,CAACC,SAAS,GAAG,IAAI;IACrBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACtB,YAAY,CAACuB,KAAK,CAAC;IACpC,IAAI,CAAC1B,eAAe,CACjB2B,cAAc,CAAC,IAAI,CAACxB,YAAY,CAACuB,KAAK,CAAC,CACvCV,SAAS,CAAEE,QAAkB,IAAI;MAChC,IAAI,CAACK,SAAS,GAAG,KAAK;MACtBC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;MACrB,IAAI,CAACf,YAAY,CAACyB,KAAK,EAAE;MACzB,IAAI,CAAC1B,MAAM,CAACmB,QAAQ,CAAC,CAAC,UAAU,EAAEH,QAAQ,CAACW,EAAE,CAAC,CAAC;IACjD,CAAC,CAAC;EAEN;EAEAC,UAAU,CAACC,WAAmB;IAC5B,OAAO,IAAI,CAAC5B,YAAY,CAAC6B,GAAG,CAACD,WAAW,CAAC;EAC3C;EAEAE,SAAS;IACP,OAAO,IAAI,CAAC9B,YAAY,CAAC+B,KAAK,IAAI,IAAI,CAAC/B,YAAY,CAACgC,KAAK;EAC3D;CACD;AAjEYtC,oBAAoB,eALhCF,SAAS,CAAC;EACTyC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACWzC,oBAAoB,CAiEhC;SAjEYA,oBAAoB","names":["Component","switchMap","UpdateRouteComponent","constructor","formBuilder","customerService","activeRoute","router","customerForm","group","firstName","lastName","email","address","gender","accountType","updateOn","ngOnInit","params","pipe","getCustomerById","subscribe","next","customer","updatedCustomer","error","navigate","submit","isLoading","console","log","value","updateCustomer","reset","id","getControl","controlName","get","canSubmit","dirty","valid","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\angular-project\\src\\app\\update-route\\update-route.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { switchMap } from 'rxjs';\nimport { CustomersService } from '../customers.service.';\nimport { Customer } from '../models/customer.model';\n\n@Component({\n  selector: 'app-update-route',\n  templateUrl: './update-route.component.html',\n  styleUrls: ['./update-route.component.css']\n})\nexport class UpdateRouteComponent implements OnInit{\n  customerForm: FormGroup;\n  isLoading = false;\n  genders = [\"Male\",\"Female\"];\n  accountTypes = [\"Saving\",\"Checking\"];\n  updatedCustomer !: Customer;\n  constructor(\n    private formBuilder: FormBuilder,\n    private customerService: CustomersService,\n    private activeRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    this.customerForm = this.formBuilder.group({\n      firstName: [\n        '',\n      ],\n      lastName: [\n        '',\n      ],\n      email: [\n        \"\",\n      ],\n      address: [\n        \"\",\n      ],\n      gender: [\n        null,\n      ],\n      accountType: [\n        null,\n      ],\n    },{ updateOn: 'blur' });\n  }\n  ngOnInit(): void {\n    this.activeRoute.params\n    .pipe(switchMap((params) => this.customerService.getCustomerById(params['id'])))\n    .subscribe({\n      next: (customer) => {this.updatedCustomer = customer},\n      error: () => {\n        this.router.navigate(['/not-found']);\n      },\n    });\n}\n  submit() {\n\n    this.isLoading = true;\n    console.log(this.customerForm.value);\n    this.customerService\n      .updateCustomer(this.customerForm.value)\n      .subscribe((customer: Customer) => {\n        this.isLoading = false;\n        console.log(customer);\n        this.customerForm.reset();\n        this.router.navigate(['/details', customer.id]);\n      });\n\n  }\n\n  getControl(controlName: string) {\n    return this.customerForm.get(controlName);\n  }\n\n  canSubmit(): boolean {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}