{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { v4 as uuid } from 'uuid';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../customers.service.\";\nimport * as i3 from \"@angular/router\";\nexport class CreateRouteComponent {\n  constructor(formBuilder, customerService, router) {\n    this.formBuilder = formBuilder;\n    this.customerService = customerService;\n    this.router = router;\n    this.isLoading = false;\n    this.genders = [\"Male\", \"Female\"];\n    this.accountTypes = [\"Saving\", \"Checking\"];\n    this.list = [];\n    this.customerForm = this.formBuilder.group({\n      firstName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)]],\n      lastName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)]],\n      email: [\"\", [Validators.required, Validators.email]],\n      address: [\"\", [Validators.required, Validators.min(1), Validators.max(100)]],\n      gender: [null, Validators.required],\n      accountType: [null, Validators.required]\n    });\n  }\n  gen() {\n    this.list.push(uuid());\n    return this.list[0];\n  }\n  submit() {\n    this.isLoading = true;\n    console.log(this.customerForm.value);\n    this.customerService.createCustomer({\n      ...this.customerForm.value,\n      id: this.gen()\n    }).subscribe(customer => {\n      this.isLoading = false;\n      console.log(customer);\n      this.customerForm.reset();\n      this.router.navigate(['/details', customer.id]);\n    });\n  }\n  getControl(controlName) {\n    return this.customerForm.get(controlName);\n  }\n  canSubmit() {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n}\nCreateRouteComponent.ɵfac = function CreateRouteComponent_Factory(t) {\n  return new (t || CreateRouteComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CustomersService), i0.ɵɵdirectiveInject(i3.Router));\n};\nCreateRouteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateRouteComponent,\n  selectors: [[\"app-create-route\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[\"type\", \"file\", 1, \"file-input\", 3, \"change\"], [\"fileUpload\", \"\"], [1, \"file-upload\"], [\"mat-mini-fab\", \"\", \"color\", \"primary\", 1, \"upload-btn\", 3, \"click\"]],\n  template: function CreateRouteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"input\", 0, 1);\n      i0.ɵɵlistener(\"change\", function CreateRouteComponent_Template_input_change_0_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementStart(4, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function CreateRouteComponent_Template_button_click_4_listener() {\n        i0.ɵɵrestoreView(_r1);\n        const _r0 = i0.ɵɵreference(1);\n        return i0.ɵɵresetView(_r0.click());\n      });\n      i0.ɵɵelementStart(5, \"mat-icon\");\n      i0.ɵɵtext(6, \"attach_file\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", ctx.fileName || \"No file uploaded yet.\", \" \");\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","v4","uuid","CreateRouteComponent","constructor","formBuilder","customerService","router","customerForm","group","firstName","required","minLength","maxLength","lastName","email","address","min","max","gender","accountType","gen","list","push","submit","isLoading","console","log","value","createCustomer","id","subscribe","customer","reset","navigate","getControl","controlName","get","canSubmit","dirty","valid","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\angular-project\\src\\app\\create-route\\create-route.component.ts","D:\\angular-project\\src\\app\\create-route\\create-route.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { map, Observable } from 'rxjs';\nimport { CustomersService } from '../customers.service.';\nimport { Customer } from '../models/customer.model';\nimport { v4 as uuid } from 'uuid';\n\n@Component({\n  selector: 'app-create-route',\n  templateUrl: './create-route.component.html',\n  styleUrls: ['./create-route.component.css']\n})\nexport class CreateRouteComponent {\n  customerForm: FormGroup;\n  isLoading = false;\n  genders = [\"Male\",\"Female\"];\n  accountTypes = [\"Saving\",\"Checking\"];\n  constructor(\n    private formBuilder: FormBuilder,\n    private customerService: CustomersService,\n    private router: Router\n  ) {\n    this.customerForm = this.formBuilder.group({\n      firstName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n      ],\n      lastName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n      ],\n      email: [\n        \"\",[Validators.required, Validators.email],\n      ],\n      address: [\n        \"\",\n        [Validators.required, Validators.min(1), Validators.max(100)],\n      ],\n      gender: [\n        null,\n      Validators.required],\n      accountType: [\n        null,\n      Validators.required],\n    });\n  }\n  public list: string[] = [];\n  public gen() {\n    this.list.push(uuid());\n    return this.list[0];\n  }\n  submit() {\n\n    this.isLoading = true;\n    console.log(this.customerForm.value);\n    this.customerService\n      .createCustomer({...this.customerForm.value,id:this.gen()})\n      .subscribe((customer: Customer) => {\n        this.isLoading = false;\n        console.log(customer);\n        this.customerForm.reset();\n        this.router.navigate(['/details', customer.id]);\n      });\n\n  }\n\n  getControl(controlName: string) {\n    return this.customerForm.get(controlName);\n  }\n\n  canSubmit(): boolean {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n\n}\n","<!-- <div class=\"flex flex-col items-center w-full mx-auto mt-20\">\n          <h3 class=\"py-8 text-2xl text-center\">Create a Customer!</h3>\n          <form class=\"px-8 pt-6 pb-8 mb-4 bg-white rounded md:w-fit w-full\" [formGroup]=\"customerForm\" (ngSubmit)=\"submit()\" >\n            <div class=\"mb-4 md:flex md:justify-between\">\n              <div class=\"mb-4 md:mr-2 md:mb-0\">\n                <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"firstName\">\n                  First Name\n                </label>\n                <input\n                  class=\"w-full px-3 py-2 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n                  id=\"firstName\"\n                  type=\"text\"\n                  placeholder=\"First Name\"\n                  formControlName=\"firstName\"\n                  value=\"\"\n                />\n                <small class=\"text-red-500\" *ngIf=\"getControl('firstName')?.hasError('required') && getControl('firstName')?.touched\">\n                  (*) First name is required\n              </small>\n              </div>\n              <div class=\"md:ml-2\">\n                <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"lastName\">\n                  Last Name\n                </label>\n                <input\n                  class=\"w-full px-3 py-2 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n                  id=\"lastName\"\n                  type=\"text\"\n                  placeholder=\"Last Name\"\n                  formControlName=\"lastName\"\n                />\n                <small class=\"text-red-500\" *ngIf=\"getControl('lastName')?.hasError('required') && getControl('lastName')?.touched\">\n                  (*) Last name is required\n              </small>\n              </div>\n            </div>\n                <div class=\"mb-4 md:w-full mr-2\">\n                <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"email\">\n                  Email\n                </label>\n                <input\n                  class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  formControlName=\"email\"\n                />\n                <small class=\"text-red-500\" *ngIf=\"getControl('email')?.hasError('required')&& getControl('email')?.touched\">(*) Email address is required</small>\n                <small class=\"text-red-500\" *ngIf=\"getControl('email')?.hasError('email') && getControl('email')?.touched\">(*) Email address is invalid</small>\n              </div>\n            <div class=\"mb-4 md:flex md:justify-between md:gap-4\">\n              <div class=\"md:w-1/2\">\n                <label for=\"gender\" class=\" block mb-2 text-sm font-bold text-gray-700\">Gender</label>\n                <select formControlName=\"gender\" name=\"gender\" id=\"gender\" class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow  focus:outline-none focus:shadow-outline\">\n                  <option [ngValue]=\"null\" disabled>  -- Gender --   </option>\n                  <option *ngFor=\"let gender of genders\" [ngValue]=\"gender\">\n                    {{gender}}\n                  </option>\n                </select>\n              </div>\n\n              <div class=\"md:w-1/2\">\n                <label for=\"accountType\" class=\" block mb-2 text-sm font-bold text-gray-700\">Account Type</label>\n                <select formControlName=\"accountType\" name=\"accountType\" id=\"accountType\" class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow  focus:outline-none focus:shadow-outline\">\n                  <option [ngValue]=\"null\" disabled>  -- Account --   </option>\n                  <option *ngFor=\"let accountType of accountTypes\" [ngValue]=\"accountType\">\n                    {{accountType}}\n                  </option>\n                </select>\n              </div>\n            </div>\n            <div class=\"mb-4\">\n              <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"address\">\n                Address\n              </label>\n              <input\n                class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n                id=\"address\"\n                type=\"text\"\n                placeholder=\"Address\"\n                formControlName=\"address\"\n              />\n              <small class=\"text-red-500\" *ngIf=\"getControl('address')?.hasError('required') && getControl('address')?.touched\">\n                (*) Address is required\n            </small>\n            </div>\n            <div class=\"mb-6 text-center\">\n              <button\n                class=\"disabled:cursor-not-allowed cursor-pointer w-1/2 px-4 py-2 font-bold text-white bg-green-500 rounded-full hover:bg-green-700 focus:outline-none focus:shadow-outline\"\n                type=\"submit\"\n                [disabled]=\"isLoading || !canSubmit()\"\n              >\n                Create\n              </button>\n            </div>\n          </form>\n</div> -->\n\n<input type=\"file\" class=\"file-input\"\n\n       (change)=\"onFileSelected($event)\" #fileUpload>\n\n\n<div class=\"file-upload\">\n\n\n   {{fileName || \"No file uploaded yet.\"}}\n\n\n    <button mat-mini-fab color=\"primary\" class=\"upload-btn\"\n\n      (click)=\"fileUpload.click()\">\n\n        <mat-icon>attach_file</mat-icon>\n\n    </button>\n\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}