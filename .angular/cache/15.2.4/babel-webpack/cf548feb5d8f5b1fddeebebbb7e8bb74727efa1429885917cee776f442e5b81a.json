{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../customers.service.\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction CreateRouteComponent_small_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 24);\n    i0.ɵɵtext(1, \" (*) First name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateRouteComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 24);\n    i0.ɵɵtext(1, \" (*) Last name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateRouteComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 24);\n    i0.ɵɵtext(1, \"(*) Email address is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateRouteComponent_small_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 24);\n    i0.ɵɵtext(1, \"(*) Email address is invalid\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateRouteComponent_option_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const gender_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", gender_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", gender_r6, \" \");\n  }\n}\nfunction CreateRouteComponent_small_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 24);\n    i0.ɵɵtext(1, \" (*) Address is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class CreateRouteComponent {\n  constructor(formBuilder, customerService, router) {\n    this.formBuilder = formBuilder;\n    this.customerService = customerService;\n    this.router = router;\n    this.isLoading = false;\n    this.genders = [\"Male\", \"Female\"];\n    this.customerForm = this.formBuilder.group({\n      firstName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)], [this.validateName.bind(this)]],\n      lastName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)], [this.validateName.bind(this)]],\n      email: [\"\", [Validators.required, Validators.email]],\n      address: [\"\", [Validators.required, Validators.min(1), Validators.max(100)]],\n      gender: [this.genders[0], []]\n    });\n  }\n  // public list: string[] = [];\n  // public gen() {\n  //   console.log(typeof uuid());\n  //   this.list.push(uuid());\n  // }\n  submit() {\n    this.isLoading = true;\n    console.log(\"hello world\");\n    // this.customerService\n    //   .createCustomer(this.customerForm.value)\n    //   .subscribe((customer: Customer) => {\n    //     this.isLoading = false;\n    //     this.customerForm.reset();\n    //     // this.gen();\n    //     //this.router.navigate(['/details', customer.id]);\n    //   });\n  }\n\n  getControl(controlName) {\n    return this.customerForm.get(controlName);\n  }\n  canSubmit() {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n  validateName(control) {\n    return this.customerService.getCustomerByName(control.value).pipe(map(customers => {\n      if (customers.length > 0) {\n        return {\n          nameExists: true\n        };\n      }\n      return null;\n    }));\n  }\n}\nCreateRouteComponent.ɵfac = function CreateRouteComponent_Factory(t) {\n  return new (t || CreateRouteComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CustomersService), i0.ɵɵdirectiveInject(i3.Router));\n};\nCreateRouteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateRouteComponent,\n  selectors: [[\"app-create-route\"]],\n  decls: 37,\n  vars: 9,\n  consts: [[1, \"flex\", \"flex-col\", \"items-center\", \"w-full\", \"mx-auto\", \"mt-20\"], [1, \"py-8\", \"text-2xl\", \"text-center\"], [1, \"px-8\", \"pt-6\", \"pb-8\", \"mb-4\", \"bg-white\", \"rounded\", \"md:w-fit\", \"w-full\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-4\", \"md:flex\", \"md:justify-between\"], [1, \"mb-4\", \"md:mr-2\", \"md:mb-0\"], [\"for\", \"firstName\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"id\", \"firstName\", \"type\", \"text\", \"placeholder\", \"First Name\", \"formControlName\", \"firstName\", \"value\", \"\", 1, \"w-full\", \"px-3\", \"py-2\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"appearance-none\", \"focus:outline-none\", \"focus:shadow-outline\"], [\"class\", \"text-red-500\", 4, \"ngIf\"], [1, \"md:ml-2\"], [\"for\", \"lastName\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"id\", \"lastName\", \"type\", \"text\", \"placeholder\", \"Last Name\", \"formControlName\", \"lastName\", 1, \"w-full\", \"px-3\", \"py-2\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"appearance-none\", \"focus:outline-none\", \"focus:shadow-outline\"], [1, \"mb-4\", \"md:flex\"], [1, \"mb-4\", \"md:w-3/4\", \"mr-2\"], [\"for\", \"email\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"id\", \"email\", \"type\", \"email\", \"placeholder\", \"Email\", \"formControlName\", \"email\", 1, \"w-full\", \"px-3\", \"py-2\", \"mb-3\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"appearance-none\", \"focus:outline-none\", \"focus:shadow-outline\"], [\"for\", \"gender\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"disabled\", \"\", 3, \"ngValue\"], [\"formControlName\", \"gender\", \"name\", \"gender\", \"id\", \"gender\", 1, \"w-full\", \"px-3\", \"py-2\", \"mb-3\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"focus:outline-none\", \"focus:shadow-outline\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"mb-4\"], [\"for\", \"address\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-bold\", \"text-gray-700\"], [\"id\", \"address\", \"type\", \"text\", \"placeholder\", \"Address\", \"formControlName\", \"address\", 1, \"w-full\", \"px-3\", \"py-2\", \"mb-3\", \"text-sm\", \"leading-tight\", \"text-gray-700\", \"border\", \"rounded\", \"shadow\", \"appearance-none\", \"focus:outline-none\", \"focus:shadow-outline\"], [1, \"mb-6\", \"text-center\"], [\"type\", \"submit\", 1, \"disabled:cursor-not-allowed\", \"cursor-pointer\", \"w-1/2\", \"px-4\", \"py-2\", \"font-bold\", \"text-white\", \"bg-green-500\", \"rounded-full\", \"hover:bg-green-700\", \"focus:outline-none\", \"focus:shadow-outline\", 3, \"disabled\"], [1, \"text-red-500\"], [3, \"ngValue\"]],\n  template: function CreateRouteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n      i0.ɵɵtext(2, \"Create a Customer!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function CreateRouteComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \" First Name \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵtemplate(9, CreateRouteComponent_small_9_Template, 2, 0, \"small\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"label\", 9);\n      i0.ɵɵtext(12, \" Last Name \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 10);\n      i0.ɵɵtemplate(14, CreateRouteComponent_small_14_Template, 2, 0, \"small\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 11)(16, \"div\", 12)(17, \"label\", 13);\n      i0.ɵɵtext(18, \" Email \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 14);\n      i0.ɵɵtemplate(20, CreateRouteComponent_small_20_Template, 2, 0, \"small\", 7);\n      i0.ɵɵtemplate(21, CreateRouteComponent_small_21_Template, 2, 0, \"small\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\")(23, \"label\", 15);\n      i0.ɵɵtext(24, \"Gender\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"option\", 16);\n      i0.ɵɵtext(26, \"-- Choose your Gender --\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"select\", 17);\n      i0.ɵɵtemplate(28, CreateRouteComponent_option_28_Template, 2, 2, \"option\", 18);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(29, \"div\", 19)(30, \"label\", 20);\n      i0.ɵɵtext(31, \" Address \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(32, \"input\", 21);\n      i0.ɵɵtemplate(33, CreateRouteComponent_small_33_Template, 2, 0, \"small\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(34, \"div\", 22)(35, \"button\", 23);\n      i0.ɵɵtext(36, \" Create \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      let tmp_4_0;\n      let tmp_7_0;\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.customerForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.getControl(\"firstName\")) == null ? null : tmp_1_0.hasError(\"required\")) && ((tmp_1_0 = ctx.getControl(\"firstName\")) == null ? null : tmp_1_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.getControl(\"lastName\")) == null ? null : tmp_2_0.hasError(\"required\")) && ((tmp_2_0 = ctx.getControl(\"lastName\")) == null ? null : tmp_2_0.touched));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.getControl(\"email\")) == null ? null : tmp_3_0.hasError(\"required\")) && ((tmp_3_0 = ctx.getControl(\"email\")) == null ? null : tmp_3_0.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.getControl(\"email\")) == null ? null : tmp_4_0.hasError(\"email\")) && ((tmp_4_0 = ctx.getControl(\"email\")) == null ? null : tmp_4_0.touched));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngValue\", null);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.genders);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_7_0 = ctx.getControl(\"address\")) == null ? null : tmp_7_0.hasError(\"required\")) && ((tmp_7_0 = ctx.getControl(\"address\")) == null ? null : tmp_7_0.touched));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.isLoading || !ctx.canSubmit());\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","map","i0","CreateRouteComponent","constructor","formBuilder","customerService","router","customerForm","group","firstName","required","minLength","maxLength","validateName","bind","lastName","email","address","min","max","gender","genders","submit","isLoading","console","log","getControl","controlName","get","canSubmit","dirty","valid","control","getCustomerByName","value","pipe","customers","length","nameExists","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\angular-project\\src\\app\\create-route\\create-route.component.ts","D:\\angular-project\\src\\app\\create-route\\create-route.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { map, Observable } from 'rxjs';\nimport { CustomersService } from '../customers.service.';\nimport { Customer } from '../models/customer.model';\nimport { v4 as uuid } from 'uuid';\n\n@Component({\n  selector: 'app-create-route',\n  templateUrl: './create-route.component.html',\n  styleUrls: ['./create-route.component.css']\n})\nexport class CreateRouteComponent {\n  customerForm: FormGroup;\n  isLoading = false;\n  genders = [\"Male\",\"Female\"];\n  constructor(\n    private formBuilder: FormBuilder,\n    private customerService: CustomersService,\n    private router: Router\n  ) {\n    this.customerForm = this.formBuilder.group({\n      firstName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n        [this.validateName.bind(this)],\n      ],\n      lastName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n        [this.validateName.bind(this)],\n      ],\n      email: [\n        \"\",[Validators.required, Validators.email],\n      ],\n      address: [\n        \"\",\n        [Validators.required, Validators.min(1), Validators.max(100)],\n      ],\n      gender: [\n        this.genders[0],\n        [] ],\n    });\n  }\n  // public list: string[] = [];\n  // public gen() {\n  //   console.log(typeof uuid());\n  //   this.list.push(uuid());\n  // }\n  submit() {\n\n    this.isLoading = true;\n    console.log(\"hello world\"!);\n    // this.customerService\n    //   .createCustomer(this.customerForm.value)\n    //   .subscribe((customer: Customer) => {\n    //     this.isLoading = false;\n    //     this.customerForm.reset();\n    //     // this.gen();\n    //     //this.router.navigate(['/details', customer.id]);\n    //   });\n\n  }\n\n  getControl(controlName: string) {\n    return this.customerForm.get(controlName);\n  }\n\n  canSubmit(): boolean {\n    return this.customerForm.dirty && this.customerForm.valid;\n  }\n\n  validateName(control: AbstractControl): Observable<{ nameExists: boolean } | null> {\n    return this.customerService.getCustomerByName(control.value).pipe(\n      map((customers: Customer[]) => {\n        if (customers.length > 0) {\n          return { nameExists: true };\n        }\n        return null;\n      })\n    );\n  }\n}\n","<!-- <div class=\"flex flex-col items-center w-1/2 mx-auto\">\n  <h1>Create a new Pokemon</h1>\n  <form [formGroup]=\"pokemonForm\" (ngSubmit)=\"submit()\" class=\"flex flex-col w-full gap-6 mt-6\">\n      <div class=\"flex flex-col gap-2\">\n          <label for=\"name\">First name *</label>\n          <input type=\"text\" id=\"name\" formControlName=\"name\" class=\"border rounded-md shadow px-4 py-2\">\n          <small class=\"text-red-500\" *ngIf=\"getControl('name')?.hasError('required') && getControl('name')?.touched\">\n              First name is required\n          </small>\n          <small class=\"text-red-500\" *ngIf=\"getControl('name')?.hasError('nameExists') && getControl('name')?.touched\">\n              this Name already exists\n          </small>\n      </div>\n      <div class=\"flex flex-col gap-2\">\n        <label for=\"name\">Last name *</label>\n        <input type=\"text\" id=\"name\" formControlName=\"name\" class=\"border rounded-md shadow px-4 py-2\">\n        <small class=\"text-red-500\" *ngIf=\"getControl('name')?.hasError('required') && getControl('name')?.touched\">\n            Last name is required\n        </small>\n        <small class=\"text-red-500\" *ngIf=\"getControl('name')?.hasError('nameExists') && getControl('name')?.touched\">\n            this Name already exists\n        </small>\n    </div>\n      <div class=\"flex flex-col gap-2\">\n          <label for=\"attack\">Attack *</label>\n          <input type=\"number\" id=\"attack\" formControlName=\"attack\" class=\"border rounded-md shadow px-4 py-2\">\n          <small class=\"text-red-500\" *ngIf=\"getControl('attack')?.hasError('required') && getControl('attack')?.touched\">\n              Attack is required\n          </small>\n          <small class=\"text-red-500\" *ngIf=\"getControl('attack')?.hasError('min') && getControl('attack')?.touched\">\n              Attack must be greater than 0\n          </small>\n          <small class=\"text-red-500\" *ngIf=\"getControl('attack')?.hasError('max') && getControl('attack')?.touched\">\n              Attack must be less than 100\n          </small>\n      </div>\n      <div class=\"flex flex-col gap-2\">\n          <label for=\"defense\">Defense *</label>\n          <input type=\"number\" id=\"defense\" formControlName=\"defense\" class=\"border rounded-md shadow px-4 py-2\">\n          <small class=\"text-red-500\" *ngIf=\"getControl('defense')?.hasError('required') && getControl('defense')?.touched\">\n              Defense is required\n          </small>\n          <small class=\"text-red-500\" *ngIf=\"getControl('defense')?.hasError('min') && getControl('defense')?.touched\">\n              Defense must be greater than 0\n          </small>\n          <small class=\"text-red-500\" *ngIf=\"getControl('defense')?.hasError('max') && getControl('defense')?.touched\">\n              Defense must be less than 100\n          </small>\n      </div>\n      <div class=\"flex items-center gap-2\">\n          <label for=\"hasEvolution\" class=\"cursor-pointer\">Has evolution</label>\n          <input type=\"checkbox\" id=\"hasEvolution\" formControlName=\"hasEvolution\" class=\"border rounded-md shadow\">\n      </div>\n      <div class=\"flex flex-col gap-2\">\n          <label for=\"description\">Description *</label>\n          <textarea type=\"text\" id=\"description\" formControlName=\"description\" class=\"border rounded-md shadow px-4 py-2\"></textarea>\n          <small class=\"text-red-500\" *ngIf=\"getControl('description')?.hasError('required') && getControl('description')?.touched\">\n              Description is required\n          </small>\n      </div>\n      <button type=\"submit\"\n          class=\"border border-green-400 rounded-md shadow p-2 bg-green-400 hover:bg-green-500 text-green-900 w-1/3 ml-auto disabled:opacity-50\"\n          [disabled]=\"isLoading || !canSubmit()\"\n          >{{isLoading ? 'Creation...': 'Create'}}</button>\n  </form>\n</div>\n\n\n\n -->\n\n\n\n<!--  -->\n<div class=\"flex flex-col items-center w-full mx-auto mt-20\">\n          <h3 class=\"py-8 text-2xl text-center\">Create a Customer!</h3>\n          <form class=\"px-8 pt-6 pb-8 mb-4 bg-white rounded md:w-fit w-full\" [formGroup]=\"customerForm\" (ngSubmit)=\"submit()\" >\n            <div class=\"mb-4 md:flex md:justify-between\">\n              <div class=\"mb-4 md:mr-2 md:mb-0\">\n                <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"firstName\">\n                  First Name\n                </label>\n                <input\n                  class=\"w-full px-3 py-2 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n                  id=\"firstName\"\n                  type=\"text\"\n                  placeholder=\"First Name\"\n                  formControlName=\"firstName\"\n                  value=\"\"\n                />\n                <small class=\"text-red-500\" *ngIf=\"getControl('firstName')?.hasError('required') && getControl('firstName')?.touched\">\n                  (*) First name is required\n              </small>\n              </div>\n              <div class=\"md:ml-2\">\n                <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"lastName\">\n                  Last Name\n                </label>\n                <input\n                  class=\"w-full px-3 py-2 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n                  id=\"lastName\"\n                  type=\"text\"\n                  placeholder=\"Last Name\"\n                  formControlName=\"lastName\"\n                />\n                <small class=\"text-red-500\" *ngIf=\"getControl('lastName')?.hasError('required') && getControl('lastName')?.touched\">\n                  (*) Last name is required\n              </small>\n              </div>\n            </div>\n            <div class=\"mb-4 md:flex\">\n\n              <div class=\"mb-4 md:w-3/4 mr-2\">\n                <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"email\">\n                  Email\n                </label>\n                <input\n                  class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  formControlName=\"email\"\n                />\n                <small class=\"text-red-500\" *ngIf=\"getControl('email')?.hasError('required')&& getControl('email')?.touched\">(*) Email address is required</small>\n                <small class=\"text-red-500\" *ngIf=\"getControl('email')?.hasError('email') && getControl('email')?.touched\">(*) Email address is invalid</small>\n              </div>\n              <div>\n                <label for=\"gender\" class=\"block mb-2 text-sm font-bold text-gray-700\">Gender</label>\n                <option [ngValue]=\"null\" disabled>-- Choose your Gender --</option>\n                <select formControlName=\"gender\" name=\"gender\" id=\"gender\" class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow  focus:outline-none focus:shadow-outline\">\n                  <option *ngFor=\"let gender of genders\" [ngValue]=\"gender\">\n                    {{gender}}\n                  </option>\n                </select>\n\n              </div>\n            </div>\n            <div class=\"mb-4\">\n              <label class=\"block mb-2 text-sm font-bold text-gray-700\" for=\"address\">\n                Address\n              </label>\n              <input\n                class=\"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\"\n                id=\"address\"\n                type=\"text\"\n                placeholder=\"Address\"\n                formControlName=\"address\"\n              />\n              <small class=\"text-red-500\" *ngIf=\"getControl('address')?.hasError('required') && getControl('address')?.touched\">\n                (*) Address is required\n            </small>\n            </div>\n            <div class=\"mb-6 text-center\">\n              <button\n                class=\"disabled:cursor-not-allowed cursor-pointer w-1/2 px-4 py-2 font-bold text-white bg-green-500 rounded-full hover:bg-green-700 focus:outline-none focus:shadow-outline\"\n                type=\"submit\"\n                [disabled]=\"isLoading || !canSubmit()\"\n              >\n                Create\n              </button>\n            </div>\n            <!-- <hr class=\"mb-6 border-t\" /> -->\n\n          </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}