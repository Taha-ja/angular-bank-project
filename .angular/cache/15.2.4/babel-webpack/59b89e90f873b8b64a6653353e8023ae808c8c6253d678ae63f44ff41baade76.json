{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { map } from 'rxjs';\nlet CreateRouteComponent = class CreateRouteComponent {\n  constructor(formBuilder, customerService, router) {\n    this.formBuilder = formBuilder;\n    this.customerService = customerService;\n    this.router = router;\n    this.isLoading = false;\n    this.pokemonForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)], [this.validateName.bind(this)]],\n      attack: [0, [Validators.required, Validators.min(1), Validators.max(100)]],\n      defense: [0, [Validators.required, Validators.min(1), Validators.max(100)]],\n      hasEvolution: [false],\n      description: ['', Validators.required]\n    });\n  }\n  submit() {\n    this.isLoading = true;\n    this.customerService.createCustomer(this.pokemonForm.value).subscribe(customer => {\n      this.isLoading = false;\n      this.pokemonForm.reset();\n      this.router.navigate(['/details', customer.id]);\n    });\n  }\n  getControl(controlName) {\n    return this.pokemonForm.get(controlName);\n  }\n  canSubmit() {\n    return this.pokemonForm.dirty && this.pokemonForm.valid;\n  }\n  validateName(control) {\n    return this.customerService.getCustomerByName(control.value).pipe(map(customers => {\n      if (customers.length > 0) {\n        return {\n          nameExists: true\n        };\n      }\n      return null;\n    }));\n  }\n};\nCreateRouteComponent = __decorate([Component({\n  selector: 'app-create-route',\n  templateUrl: './create-route.component.html',\n  styleUrls: ['./create-route.component.css']\n})], CreateRouteComponent);\nexport { CreateRouteComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAkDC,UAAU,QAAQ,gBAAgB;AAEpF,SAASC,GAAG,QAAoB,MAAM;AAS/B,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAI/BC,YACUC,WAAwB,EACxBC,eAAiC,EACjCC,MAAc;IAFd,gBAAW,GAAXF,WAAW;IACX,oBAAe,GAAfC,eAAe;IACf,WAAM,GAANC,MAAM;IALhB,cAAS,GAAG,KAAK;IAOf,IAAI,CAACC,WAAW,GAAG,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC;MACxCC,IAAI,EAAE,CACJ,EAAE,EACF,CACET,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CACzB,EACD,CAAC,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAC/B;MACDC,MAAM,EAAE,CACN,CAAC,EACD,CAACf,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACgB,GAAG,CAAC,CAAC,CAAC,EAAEhB,UAAU,CAACiB,GAAG,CAAC,GAAG,CAAC,CAAC,CAC9D;MACDC,OAAO,EAAE,CACP,CAAC,EACD,CAAClB,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACgB,GAAG,CAAC,CAAC,CAAC,EAAEhB,UAAU,CAACiB,GAAG,CAAC,GAAG,CAAC,CAAC,CAC9D;MACDE,YAAY,EAAE,CAAC,KAAK,CAAC;MACrBC,WAAW,EAAE,CAAC,EAAE,EAAEpB,UAAU,CAACU,QAAQ;KACtC,CAAC;EACJ;EAEAW,MAAM;IACJ,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACjB,eAAe,CACjBkB,cAAc,CAAC,IAAI,CAAChB,WAAW,CAACiB,KAAK,CAAC,CACtCC,SAAS,CAAEC,QAAkB,IAAI;MAChC,IAAI,CAACJ,SAAS,GAAG,KAAK;MACtB,IAAI,CAACf,WAAW,CAACoB,KAAK,EAAE;MACxB,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,UAAU,EAAEF,QAAQ,CAACG,EAAE,CAAC,CAAC;IACjD,CAAC,CAAC;EACN;EAEAC,UAAU,CAACC,WAAmB;IAC5B,OAAO,IAAI,CAACxB,WAAW,CAACyB,GAAG,CAACD,WAAW,CAAC;EAC1C;EAEAE,SAAS;IACP,OAAO,IAAI,CAAC1B,WAAW,CAAC2B,KAAK,IAAI,IAAI,CAAC3B,WAAW,CAAC4B,KAAK;EACzD;EAEAtB,YAAY,CAACuB,OAAwB;IACnC,OAAO,IAAI,CAAC/B,eAAe,CAACgC,iBAAiB,CAACD,OAAO,CAACZ,KAAK,CAAC,CAACc,IAAI,CAC/DrC,GAAG,CAAEsC,SAAqB,IAAI;MAC5B,IAAIA,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;QACxB,OAAO;UAAEC,UAAU,EAAE;QAAI,CAAE;;MAE7B,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;CACD;AA7DYvC,oBAAoB,eALhCH,SAAS,CAAC;EACT2C,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACW1C,oBAAoB,CA6DhC;SA7DYA,oBAAoB","names":["Component","Validators","map","CreateRouteComponent","constructor","formBuilder","customerService","router","pokemonForm","group","name","required","minLength","maxLength","validateName","bind","attack","min","max","defense","hasEvolution","description","submit","isLoading","createCustomer","value","subscribe","customer","reset","navigate","id","getControl","controlName","get","canSubmit","dirty","valid","control","getCustomerByName","pipe","customers","length","nameExists","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\angular-project\\src\\app\\create-route\\create-route.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { map, Observable } from 'rxjs';\nimport { CustomersService } from '../customers.service.';\nimport { Customer } from '../models/customer.model';\n\n@Component({\n  selector: 'app-create-route',\n  templateUrl: './create-route.component.html',\n  styleUrls: ['./create-route.component.css']\n})\nexport class CreateRouteComponent {\n  pokemonForm: FormGroup;\n  isLoading = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private customerService: CustomersService,\n    private router: Router\n  ) {\n    this.pokemonForm = this.formBuilder.group({\n      name: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n        [this.validateName.bind(this)],\n      ],\n      attack: [\n        0,\n        [Validators.required, Validators.min(1), Validators.max(100)],\n      ],\n      defense: [\n        0,\n        [Validators.required, Validators.min(1), Validators.max(100)],\n      ],\n      hasEvolution: [false],\n      description: ['', Validators.required],\n    });\n  }\n\n  submit() {\n    this.isLoading = true;\n    this.customerService\n      .createCustomer(this.pokemonForm.value)\n      .subscribe((customer: Customer) => {\n        this.isLoading = false;\n        this.pokemonForm.reset();\n        this.router.navigate(['/details', customer.id]);\n      });\n  }\n\n  getControl(controlName: string) {\n    return this.pokemonForm.get(controlName);\n  }\n\n  canSubmit(): boolean {\n    return this.pokemonForm.dirty && this.pokemonForm.valid;\n  }\n\n  validateName(control: AbstractControl): Observable<{ nameExists: boolean } | null> {\n    return this.customerService.getCustomerByName(control.value).pipe(\n      map((customers: Customer[]) => {\n        if (customers.length > 0) {\n          return { nameExists: true };\n        }\n        return null;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}